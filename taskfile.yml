version: '3'

silent: true

tasks:
  default:
    cmds:
      - task -l

  test:
    desc: Lancer les tests Go avec gotestsum
    cmds:
      - gotestsum -f github-actions -- -v $(go list ./... | grep -vE "vendor") -coverprofile=coverage.out -covermode=atomic
      
  test:api:
    desc: Benchmark l'api (ideal pour voir les metrics sur grafana)
    cmds:
      - tests/run.sh

  run:bin:
    deps: [build:bin]
    desc: Lancer l'application Go sans Docker
    cmds:
      - .build/$(basename $(pwd))

  build:bin:
    desc: Construire les binaires Go
    cmds:
      - swag init -d ./api -g fizzbuzz/main.go -o ./api/internal/docs/generated
      - go generate ./...
      - CGO_ENABLED=0 go build -trimpath -buildvcs=false -tags netgo -ldflags "-s -w -extldflags '-static'" -o .build/fizzbuzz api/fizzbuzz/main.go

  build:docker:local:
    desc: Construire l'image Docker en local
    cmds:
      - swag init -d ./api -g fizzbuzz/main.go -o ./api/internal/docs/generated
      - go generate ./...
      - GOOS=linux CGO_ENABLED=0 go build -trimpath -buildvcs=false -tags netgo -ldflags "-s -w -extldflags '-static'" -o .build/fizzbuzz api/fizzbuzz/main.go
      - docker build -t kodmain/fizzbuzz -f .github/ci/dockerfiles/fizzbuzz.local.Dockerfile .

  deploy:local:
    deps: [build:docker:local]
    dir: deploy/local
    desc: Déployer l'application en local avec la release sur la machine
    cmds:
      - terraform init -upgrade
      - terraform apply -auto-approve
  
  deploy:release:
    dir: deploy/local
    desc: Déployer l'application en local avec la release sur github
    cmds:
      - docker rm $(docker ps -aq) -f || true
      - docker system prune -af --volumes
      - terraform init -upgrade
      - terraform apply -auto-approve